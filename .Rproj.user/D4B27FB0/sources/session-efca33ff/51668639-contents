# 完整的海拔与痛风负担相关性分析

# 环境设置
rm(list = ls()); gc()
ORIGINAL_DIR <- "/data/nas1/zhangtongrui_OD/project/01_project0789"
output <- file.path(ORIGINAL_DIR, "04_altitude_gout")
if (!dir.exists(output)) {
  dir.create(output, recursive = TRUE)
}
setwd(ORIGINAL_DIR)

# 加载包
library(ggplot2)
library(dplyr)
library(geodata)
library(rnaturalearth)
library(exactextractr)
library(sf)
library(terra)

# 1. 获取国家边界和GBD数据
world_countries <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")
gbd_sample <- read.csv("00_rawdata/IHME-GBD_2021_DATA-7cf7e249-1.csv")
gbd_countries_names <- unique(gbd_sample$location_name)
gbd_countries <- world_countries[world_countries$name %in% gbd_countries_names, ]

# 2. 修复ISO3代码
gbd_countries$iso_a3[gbd_countries$name == "France"] <- "FRA"
gbd_countries$iso_a3[gbd_countries$name == "Norway"] <- "NOR"

# 3. 计算人口加权平均海拔
global_pop <- geodata::population(year = 2020, res = 0.5, path = tempdir())
country_elevation <- numeric(nrow(gbd_countries))

for(i in 1:nrow(gbd_countries)) {
  country_iso3 <- gbd_countries$iso_a3[i] 
  
  if(is.na(country_iso3) || country_iso3 == "-99") {
    country_elevation[i] <- NA
    next
  }
  
  tryCatch({
    elevation_raster <- geodata::elevation_30s(country = country_iso3, path = tempdir())
    
    # 人口加权计算
    country_pop <- terra::crop(global_pop, gbd_countries[i,])
    country_pop <- terra::mask(country_pop, gbd_countries[i,])
    country_pop_resampled <- terra::resample(country_pop, elevation_raster, method = "bilinear")
    
    elev_vals <- terra::values(elevation_raster)
    pop_vals <- terra::values(country_pop_resampled)
    
    valid_idx <- !is.na(elev_vals) & !is.na(pop_vals) & pop_vals > 0
    
    if(sum(valid_idx) > 0) {
      mean_elev <- weighted.mean(elev_vals[valid_idx], pop_vals[valid_idx])
    } else {
      mean_elev <- exactextractr::exact_extract(elevation_raster, gbd_countries[i,], 'mean')
    }
    
    if(is.na(mean_elev) || mean_elev == 0) {
      country_elevation[i] <- NA
    } else {
      country_elevation[i] <- mean_elev
    }
    
  }, error = function(e) {
    country_elevation[i] <- NA
  })
}

# 4. 创建海拔数据框
elevation_data <- data.frame(
  Country = gbd_countries$name,
  ISO3 = gbd_countries$iso_a3,
  Elevation = country_elevation
)
elevation_data <- elevation_data[!is.na(elevation_data$Elevation), ]

# 5. 痛风数据处理和相关性分析函数
process_gout_indicator <- function(indicator_type) {
  
  measure_filter <- switch(indicator_type,
                           "asir" = "Incidence",
                           "aspr" = "Prevalence", 
                           "asdr" = "DALYs"
  )
  
  gbd_processed <- gbd_sample %>%
    filter(sex_name == "Both", grepl(measure_filter, measure_name, ignore.case = TRUE)) %>%
    select(location_name, val) %>%
    rename(Country = location_name) %>%
    rename(!!indicator_type := val)
  
  merged_data <- merge(elevation_data, gbd_processed, by = "Country", all = FALSE)
  merged_data <- merged_data[complete.cases(merged_data), ]
  
  cor_result <- cor.test(merged_data$Elevation, merged_data[[indicator_type]], method = "spearman")
  significant <- abs(cor_result$estimate) > 0.3 & cor_result$p.value < 0.05
  
  plot <- ggplot(merged_data, aes(x = Elevation, y = .data[[indicator_type]])) +
    geom_point(color = "#8B0000", size = 2.5, alpha = 0.7) +
    geom_smooth(method = "loess", se = TRUE, color = "#8B0000", fill = "#FFB6C1", alpha = 0.3) +
    annotate("text", x = Inf, y = Inf, 
             label = paste0("r = ", round(cor_result$estimate, 3), 
                            ", p ", 
                            ifelse(cor_result$p.value < 0.001, "< 0.001", 
                                   paste("=", round(cor_result$p.value, 3)))),
             hjust = 1.1, vjust = 1.5, size = 4) +
    labs(title = paste(toupper(indicator_type), "under different altitudes"),
         x = "Elevation", y = paste0(toupper(indicator_type), " (per 100,000)")) +
    theme_classic() +
    theme(plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
          panel.border = element_rect(color = "black", fill = NA))
  
  return(list(data = merged_data, correlation = cor_result$estimate, 
              p_value = cor_result$p.value, significant = significant, plot = plot))
}

# 6. 进行分析
asir_results <- process_gout_indicator("asir")
aspr_results <- process_gout_indicator("aspr")
asdr_results <- process_gout_indicator("asdr")

# 7. 结果汇总
correlation_summary <- data.frame(
  Indicator = c("ASIR", "ASPR", "ASDR"),
  Correlation = c(asir_results$correlation, aspr_results$correlation, asdr_results$correlation),
  P_value = c(asir_results$p_value, aspr_results$p_value, asdr_results$p_value),
  Significant = c(asir_results$significant, aspr_results$significant, asdr_results$significant),
  Sample_Size = c(nrow(asir_results$data), nrow(aspr_results$data), nrow(asdr_results$data))
)

print("Spearman相关性分析结果:")
print(correlation_summary)

# 8. 显示图形
print(asir_results$plot)
print(aspr_results$plot)
print(asdr_results$plot)

# 9. 保存结果
ggsave(file.path(output, "asir_plot.png"), plot = asir_results$plot, width = 10, height = 6, dpi = 300)
ggsave(file.path(output,"aspr_plot.png"), plot = aspr_results$plot, width = 10, height = 6, dpi = 300)
ggsave(file.path(output,"asdr_plot.png"), plot = asdr_results$plot, width = 10, height = 6, dpi = 300)

write.csv(elevation_data, file.path(output, "elevation_data.csv"), row.names = FALSE)
write.csv(correlation_summary, file.path(output, "correlation_results.csv"), row.names = FALSE)