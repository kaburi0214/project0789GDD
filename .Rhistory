female != 999,
urban != 999,
edu != 999,
!is.na(median),
!is.na(lowerci_95),
!is.na(upperci_95)
)
ssb_regions_18 <- ssb_regions %>%
filter(
year == 2018,
age!= 999,
female != 999,
urban != 999,
edu != 999,
!is.na(median),
!is.na(lowerci_95),
!is.na(upperci_95)
)
ssb_countries_18 <- ssb_countries %>%
filter(
year == 2018, # 删掉了iso3 top30筛选
age!= 999,
female != 999,
urban != 999,
edu != 999,
!is.na(median),
!is.na(lowerci_95),
!is.na(upperci_95)
)
#检查数据分布
medians <- ssb_global_18$median
hist(medians, breaks = 40,
main = "Histogram of SSB Intake Median",
xlab = "Median Intake (g/day)",
col = "skyblue", border = "white")
log_medians <- log(medians)
hist(log_medians, breaks = 40,
main = "Histogram of log(Median SSB Intake)",
xlab = "Log(Median Intake)", col = "lightgreen")
qqnorm(log_medians); qqline(log_medians, col = "red")
# 将分类变量转换为因子
ssb_global_18 <- ssb_global_18 %>%
mutate(
age = factor(age, levels = c(0.5, 1.5, 3.5, seq(7.5, 97.5, by = 5))),
gender = factor(female, levels = c(0, 1), labels = c("Male", "Female")),
education = factor(edu, levels = c(1, 2, 3), labels = c("0-6", "6-12", "≥12")),
residence = factor(urban, levels = c(0, 1), labels = c("Rural", "Urban"))
)
ssb_regions_18 <- ssb_regions_18 %>%
mutate(
age = factor(age, levels = c(0.5, 1.5, 3.5, seq(7.5, 97.5, by = 5))),
gender = factor(female, levels = c(0, 1), labels = c("Male", "Female")),
education = factor(edu, levels = c(1, 2, 3), labels = c("0-6", "6-12", "≥12")),
residence = factor(urban, levels = c(0, 1), labels = c("Rural", "Urban")),
superregion = factor(superregion2, levels = c("Asia", "FSU", "HIC", "LAC", "MENA", "SAARC", "SSA"))
)
ssb_countries_18 <- ssb_countries_18 %>%
mutate(
age = factor(age, levels = c(0.5, 1.5, 3.5, seq(7.5, 97.5, by = 5))),
gender = factor(female, levels = c(0, 1), labels = c("Male", "Female")),
education = factor(edu, levels = c(1, 2, 3), labels = c("0-6", "6-12", "≥12")),
residence = factor(urban, levels = c(0, 1), labels = c("Rural", "Urban")),
superregion = factor(superregion2, levels = c("Asia", "FSU", "HIC", "LAC", "MENA", "SAARC", "SSA")),
country = factor(iso3) # level 删掉top30 factor(iso3, levels = top30)
)
# 拟合贝叶斯模型(top30)
# if (file.exists(file.path(output, "ssb_bayesian_md.rds"))) {
#   model_cnty <- readRDS(file.path(output, "ssb_bayesian_md.rds"))
# } else {
#   model_cnty <- brm(
#     formula = log(median) ~ age + gender + education + residence + (1 | superregion / country),
#     data = ssb_countries_18,
#     family = gaussian(),
#     chains = 4,
#     cores = 4,
#     iter = 4000,
#     warmup = 2000,
#     control = list(
#       adapt_delta = 0.95,
#       max_treedepth = 15
#     ),
#     seed = 42
#   )
#   saveRDS(model_cnty, file.path(output, "ssb_bayesian_model.rds"))
# }
# model <- readRDS("02_SSB_intake_dist/ssb_bayesian_model.rds")
model_cnty <- readRDS("03_SSBgout/ssb_all_country_bm.rds")
age_levels <- levels(ssb_countries_18$age)
gender_levels <- levels(ssb_countries_18$gender)
education_levels <- levels(ssb_countries_18$education)
residence_levels <- levels(ssb_countries_18$residence)
strata_grid <- expand.grid(
age = age_levels,
gender = gender_levels,
education = education_levels,
residence = residence_levels
)
pred_data_global <- strata_grid %>%
mutate(superregion = NA, country = NA)
pred_data_region <- strata_grid %>%
crossing(superregion = levels(ssb_countries_18$superregion)) %>%
mutate(country = NA)
country_region_lookup <- ssb_countries_18 %>%
distinct(country, superregion)
pred_data_country <- strata_grid %>%
crossing(country = levels(ssb_countries_18$country)) %>%
left_join(country_region_lookup, by = "country")
get_posterior_predict <- function(model, newdata, re_formula = NULL) {
pred <- posterior_epred(
model,
newdata = newdata,
re_formula = re_formula,
allow_new_levels = TRUE
)
exp(pred)
}
# 生成预测矩阵
pred_global <- get_posterior_predict(model_cnty, pred_data_global, re_formula = NA)
pred_region <- get_posterior_predict(model_cnty, pred_data_region, re_formula = ~ (1 | superregion))
pred_country <- get_posterior_predict(model_cnty, pred_data_country, re_formula = ~ (1 | superregion / country))
calculate_summary <- function(pred_matrix) {
# pred_matrix：samples x observations
median_val <- apply(pred_matrix, 2, median)
lower_val <- apply(pred_matrix, 2, quantile, 0.025)
upper_val <- apply(pred_matrix, 2, quantile, 0.975)
tibble(
median = median_val,
lower = lower_val,
upper = upper_val,
formatted = sprintf("%.1f (%.1f–%.1f)", median_val, lower_val, upper_val)
)
}
generate_stratified_tables <- function(pred_matrix, pred_data, level_var, level_value) {
# pred_matrix 已经是原始尺度了（get_posterior_predict函数已经做了exp转换）
# 确保数据对齐
complete_idx <- complete.cases(pred_data[, c("age", "gender", "education", "residence")])
pred_data <- pred_data[complete_idx, ]
pred_matrix <- pred_matrix[, complete_idx]
# 添加层级信息的辅助函数
append_level_info <- function(df) {
df[[level_var]] <- level_value
df
}
# 1. Overall（总体）
overall_samples <- rowMeans(pred_matrix)  # 每个posterior draw的平均值
overall <- tibble(
median = median(overall_samples),
lower = quantile(overall_samples, 0.025),
upper = quantile(overall_samples, 0.975),
formatted = sprintf("%.1f (%.1f–%.1f)", median, lower, upper),
group = "Overall",
subgroup = NA
) %>% append_level_info()
# 2. 按性别分组
gender_table <- map_dfr(unique(pred_data$gender), function(g) {
idx <- which(pred_data$gender == g)
group_samples <- rowMeans(pred_matrix[, idx, drop = FALSE])
tibble(
median = median(group_samples),
lower = quantile(group_samples, 0.025),
upper = quantile(group_samples, 0.975),
formatted = sprintf("%.1f (%.1f–%.1f)", median, lower, upper),
group = "Sex",
subgroup = as.character(g)
) %>% append_level_info()
})
# 3. 按教育水平分组
edu_table <- map_dfr(unique(pred_data$education), function(e) {
idx <- which(pred_data$education == e)
group_samples <- rowMeans(pred_matrix[, idx, drop = FALSE])
tibble(
median = median(group_samples),
lower = quantile(group_samples, 0.025),
upper = quantile(group_samples, 0.975),
formatted = sprintf("%.1f (%.1f–%.1f)", median, lower, upper),
group = "Education",
subgroup = as.character(e)
) %>% append_level_info()
})
# 4. 按居住地分组
res_table <- map_dfr(unique(pred_data$residence), function(r) {
idx <- which(pred_data$residence == r)
group_samples <- rowMeans(pred_matrix[, idx, drop = FALSE])
tibble(
median = median(group_samples),
lower = quantile(group_samples, 0.025),
upper = quantile(group_samples, 0.975),
formatted = sprintf("%.1f (%.1f–%.1f)", median, lower, upper),
group = "Residence",
subgroup = as.character(r)
) %>% append_level_info()
})
# 5. 按年龄分组（≥22.5岁）
age_keep <- as.numeric(as.character(pred_data$age)) >= 22.5
age_levels <- unique(pred_data$age[age_keep])
age_table <- map_dfr(age_levels, function(a) {
idx <- which(pred_data$age == a)
group_samples <- rowMeans(pred_matrix[, idx, drop = FALSE])
tibble(
median = median(group_samples),
lower = quantile(group_samples, 0.025),
upper = quantile(group_samples, 0.975),
formatted = sprintf("%.1f (%.1f–%.1f)", median, lower, upper),
group = "Age",
subgroup = as.character(a)
) %>% append_level_info()
})
# 合并所有结果
bind_rows(overall, gender_table, edu_table, res_table, age_table)
}
table_global <- generate_stratified_tables(pred_global, pred_data_global, "superregion", "World")
table_region <- map_dfr(levels(ssb_countries_18$superregion), function(region) {
idx <- which(pred_data_region$superregion == region)
generate_stratified_tables(pred_region[, idx], pred_data_region[idx, ], "superregion", region)
})
table_country <- map_dfr(levels(ssb_countries_18$country), function(cty) {
idx <- which(pred_data_country$country == cty)
generate_stratified_tables(pred_country[, idx], pred_data_country[idx, ], "country", cty)
})
final_table_stratified <- bind_rows(table_global, table_region, table_country)
# 查看结果
print(final_table_stratified)
# 从final_table_stratified提取数据生成两张表格
table_1_pivot <- final_table_stratified %>%
# 筛选全球和区域层级
filter(superregion %in% c("World", "Asia", "FSU", "HIC", "LAC", "MENA", "SAARC", "SSA")) %>%
# 选择需要的分组
filter(group %in% c("Overall", "Sex", "Age", "Education", "Residence")) %>%
# 创建行标识符
mutate(
row_label = case_when(
group == "Overall" ~ "Overall",
group == "Sex" & subgroup == "Female" ~ "Female",
group == "Sex" & subgroup == "Male" ~ "Male",
group == "Age" ~ paste("Age", subgroup),
group == "Education" & subgroup == "0-6" ~ "Education 0-6 years",
group == "Education" & subgroup == "6-12" ~ "Education 6-12 years",
group == "Education" & subgroup == "≥12" ~ "Education ≥12 years",
group == "Residence" & subgroup == "Rural" ~ "Rural",
group == "Residence" & subgroup == "Urban" ~ "Urban"
)
) %>%
# 选择需要的列
dplyr::select(superregion, row_label, formatted) %>%
# 透视表：行变列
pivot_wider(
names_from = superregion,
values_from = formatted,
names_sort = TRUE
) %>%
# 重新排列列顺序
dplyr::select(row_label, World, Asia, FSU, HIC, LAC, MENA, SAARC, SSA)
table_2_pivot <- final_table_stratified %>%
# 筛选国家层级
filter(!is.na(country)) %>%
# 选择需要的分组（不包含年龄以简化）
filter(group %in% c("Overall", "Sex", "Education", "Residence")) %>%
# 创建列标识符
mutate(
col_label = case_when(
group == "Overall" ~ "Overall",
group == "Sex" & subgroup == "Female" ~ "Female",
group == "Sex" & subgroup == "Male" ~ "Male",
group == "Education" & subgroup == "0-6" ~ "Education 0-6 years",
group == "Education" & subgroup == "6-12" ~ "Education 6-12 years",
group == "Education" & subgroup == "≥12" ~ "Education ≥12 years",
group == "Residence" & subgroup == "Rural" ~ "Rural",
group == "Residence" & subgroup == "Urban" ~ "Urban"
)
) %>%
# 选择需要的列
dplyr::select(country, col_label, formatted) %>%
# 透视表：列变行
pivot_wider(
names_from = col_label,
values_from = formatted
) %>%
# 重新排列列顺序
dplyr::select(country, Overall, Female, Male, `Education 0-6 years`, `Education 6-12 years`, `Education ≥12 years`, Rural, Urban)
write.csv(table_1_pivot,
file.path(output, "Table_1_Global_Regional_Pivot.csv"),
row.names = FALSE)
write.csv(table_2_pivot,
file.path(output, "Table_2_Countries_Pivot.csv"),
row.names = FALSE)
View(table_1_pivot)
View(table_1_pivot)
View(table_2_pivot)
source("/data/nas1/zhangtongrui_OD/project/01_project0789/r.02_ssbintk.r")
source("/data/nas1/zhangtongrui_OD/project/01_project0789/r.02_ssbintk.r")
View(table_2_pivot)
View(table_1_pivot)
source("/data/nas1/zhangtongrui_OD/project/01_project0789/r.02_ssbintk.r")
source("/data/nas1/zhangtongrui_OD/project/01_project0789/r.02_SSB_intake_dist.r")
source("/data/nas1/zhangtongrui_OD/project/01_project0789/r.02_SSB_intake_dist.r")
source("/data/nas1/zhangtongrui_OD/project/01_project0789/r.02_ssbintk.r")
source("/data/nas1/zhangtongrui_OD/project/01_project0789/r.02_SSB_intake_dist.r")
read.csv("02_SSB_intake_dist/Table_1_Global_Regional_Pivot.csv")
View(table_1_pivot)
View(table_2_pivot)
View(table_2_pivot)
source("/data/nas1/zhangtongrui_OD/project/01_project0789/r.03_global.r")
# 当前脚本应该在01_project0789目录下，而不是在分析点目录07_EAPC里面
# 清除当前环境所有变量并返回内存使用情况
rm(list = ls()); gc()
# 定义两个变量,output和ORIGINAL_DIR
ORIGINAL_DIR <- "/data/nas1/zhangtongrui_OD/project/01_project0789"
output <- file.path(ORIGINAL_DIR, "07_EAPC")
# 确保输出目录存在
if (!dir.exists(output)) {
dir.create(output, recursive = TRUE)
}
# 切换到项目目录下
setwd(ORIGINAL_DIR)
# 加载必要的包
library(dplyr)
# 加载数据集
gbd_eapc <- read.csv("00_rawdata/IHME-GBD_2021_DATA-ec7daba0-1.csv")
View(gbd_eapc)
# 过滤数据
gbd_asr <- gbd_eapc %>%
filter(
age_name == "Age-standardized",
metric_name == "Rate",
measure_name %in% c("Incidence", "Prevalence", "DALYs (Disability-Adjusted Life Years)")
)%>%
dplyr::select(
measure_name,
location_name,
sex_name,
age_name,
metric_name,
year,
val,
upper,
lower
)
# 当前脚本应该在01_project0789目录下，而不是在分析点目录07_EAPC里面
# 清除当前环境所有变量并返回内存使用情况
rm(list = ls()); gc()
# 定义两个变量,output和ORIGINAL_DIR
ORIGINAL_DIR <- "/data/nas1/zhangtongrui_OD/project/01_project0789"
output <- file.path(ORIGINAL_DIR, "07_EAPC")
# 确保输出目录存在
if (!dir.exists(output)) {
dir.create(output, recursive = TRUE)
}
# 切换到项目目录下
setwd(ORIGINAL_DIR)
# 加载必要的包
library(ggplot2)
library(rworldmap)
library(meta)
library(brms)
library(dplyr)
library(tidyr)
library(countrycode)
library(readxl)
# 当前脚本应该在01_project0789目录下，而不是在分析点目录07_EAPC里面
# 清除当前环境所有变量并返回内存使用情况
rm(list = ls()); gc()
# 定义两个变量,output和ORIGINAL_DIR
ORIGINAL_DIR <- "/data/nas1/zhangtongrui_OD/project/01_project0789"
output <- file.path(ORIGINAL_DIR, "07_change")
# 确保输出目录存在
if (!dir.exists(output)) {
dir.create(output, recursive = TRUE)
}
# 切换到项目目录下
setwd(ORIGINAL_DIR)
# 加载必要的包
library(ggplot2)
library(rworldmap)
library(meta)
library(brms)
library(dplyr)
library(tidyr)
library(countrycode)
library(readxl)
# 构建基于全球185个国家SSB摄入情况的贝叶斯模型(1990年)
ssb_countries <- read.csv('00_rawdata/Country-level estimates/v15_cnty.csv')
source("/data/nas1/zhangtongrui_OD/project/01_project0789/r.07_change.r")
# 当前脚本应该在01_project0789目录下，而不是在分析点目录07_change里面
# 清除当前环境所有变量并返回内存使用情况
rm(list = ls()); gc()
# 定义两个变量,output和ORIGINAL_DIR
ORIGINAL_DIR <- "/data/nas1/zhangtongrui_OD/project/01_project0789"
output <- file.path(ORIGINAL_DIR, "07_change")
# 确保输出目录存在
if (!dir.exists(output)) {
dir.create(output, recursive = TRUE)
}
# 切换到项目目录下
setwd(ORIGINAL_DIR)
# 加载必要的包
library(ggplot2)
library(rworldmap)
library(meta)
library(brms)
library(dplyr)
library(tidyr)
library(countrycode)
library(readxl)
# 构建基于全球185个国家SSB摄入情况的贝叶斯模型(1990年)
ssb_countries <- read.csv('00_rawdata/Country-level estimates/v15_cnty.csv')
# 筛选并清理数据
ssb_countries_90 <- ssb_countries %>%
filter(
year == 1990,
age!= 999,
female != 999,
urban != 999,
edu != 999,
!is.na(median),
!is.na(lowerci_95),
!is.na(upperci_95)
)
# 将分类变量转换为因子
ssb_countries_90 <- ssb_countries_90 %>%
mutate(
age = factor(age, levels = c(0.5, 1.5, 3.5, seq(7.5, 97.5, by = 5))),
gender = factor(female, levels = c(0, 1), labels = c("Male", "Female")),
education = factor(edu, levels = c(1, 2, 3), labels = c("0-6", "6-12", "≥12")),
residence = factor(urban, levels = c(0, 1), labels = c("Rural", "Urban")),
superregion = factor(superregion2, levels = c("Asia", "FSU", "HIC", "LAC", "MENA", "SAARC", "SSA")),
country = factor(iso3, levels = unique(ssb_countries_90$iso3))
)
# 拟合贝叶斯模型
if (file.exists(file.path(output, "ssb_all_country_bm_90.rds"))) {
model_cnty_90 <- readRDS(file.path(output, "ssb_all_country_bm_90.rds"))
} else {
model_cnty_90 <- brm(
formula = log(median) ~ age + gender + education + residence + (1 | superregion / country),
data = ssb_countries_90,
family = gaussian(),
chains = 8,
cores = 8,
iter = 2000,
warmup = 1000,
control = list(
adapt_delta = 0.95,
max_treedepth = 15
),
seed = 42
)
saveRDS(model_cnty_90, file.path(output, "ssb_all_country_bm_90.rds"))
}
# 当前脚本应该在01_project0789目录下，而不是在分析点目录07_change里面
# 清除当前环境所有变量并返回内存使用情况
rm(list = ls()); gc()
# 定义两个变量,output和ORIGINAL_DIR
ORIGINAL_DIR <- "/data/nas1/zhangtongrui_OD/project/01_project0789"
output <- file.path(ORIGINAL_DIR, "07_change")
# 确保输出目录存在
if (!dir.exists(output)) {
dir.create(output, recursive = TRUE)
}
# 切换到项目目录下
setwd(ORIGINAL_DIR)
# 加载必要的包
library(ggplot2)
library(rworldmap)
library(meta)
library(brms)
library(dplyr)
library(tidyr)
library(countrycode)
library(readxl)
# 构建基于全球185个国家SSB摄入情况的贝叶斯模型(1990年)
ssb_countries <- read.csv('00_rawdata/Country-level estimates/v15_cnty.csv')
# 筛选并清理数据
ssb_countries_90 <- ssb_countries %>%
filter(
year == 1990,
age!= 999,
female != 999,
urban != 999,
edu != 999,
!is.na(median),
!is.na(lowerci_95),
!is.na(upperci_95)
)
# 将分类变量转换为因子
ssb_countries_90 <- ssb_countries_90 %>%
mutate(
age = factor(age, levels = c(0.5, 1.5, 3.5, seq(7.5, 97.5, by = 5))),
gender = factor(female, levels = c(0, 1), labels = c("Male", "Female")),
education = factor(edu, levels = c(1, 2, 3), labels = c("0-6", "6-12", "≥12")),
residence = factor(urban, levels = c(0, 1), labels = c("Rural", "Urban")),
superregion = factor(superregion2, levels = c("Asia", "FSU", "HIC", "LAC", "MENA", "SAARC", "SSA")),
country = factor(iso3, levels = unique(ssb_countries_90$iso3))
)
# 拟合贝叶斯模型
if (file.exists(file.path(output, "ssb_all_country_bm_90.rds"))) {
model_cnty_90 <- readRDS(file.path(output, "ssb_all_country_bm_90.rds"))
} else {
model_cnty_90 <- brm(
formula = log(median) ~ age + gender + education + residence + (1 | superregion / country),
data = ssb_countries_90,
family = gaussian(),
chains = 8,
cores = 8,
iter = 2000,
warmup = 1000,
control = list(
adapt_delta = 0.95,
max_treedepth = 15
),
seed = 42
)
saveRDS(model_cnty_90, file.path(output, "ssb_all_country_bm_90.rds"))
}
